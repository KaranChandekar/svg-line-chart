{"version":3,"file":"line-chart.module.js","sources":["../src/index.mjs"],"sourcesContent":["// @format\nimport htm from \"htm\";\nimport vhtml from \"vhtml\";\nimport {\n  eachMonthOfInterval,\n  isAfter,\n  isSameDay,\n  format,\n  isEqual\n} from \"date-fns\";\nimport { paramCase } from \"param-case\";\n\nconst html = htm.bind(vhtml);\n\nconst offsetX = 10;\nconst offsetY = 5;\n\nexport function plot(data, options) {\n  const { x, labels } = scaleDates(offsetX, options.width, data.x);\n\n  const { min, max } = getMinMax(data.y, options.margin);\n  const y = scalePoints(offsetY, options.height, min, max, data.y);\n  const yPoints = generateLabelRange(min, max, options.yDistance);\n  const yScaledLabels = scalePoints(offsetY, options.height, min, max, yPoints);\n\n  const l = polyline(x, y, options.line);\n\n  return html`\n      <svg viewBox=\"0 0 ${options.width} ${options.height}\">\n        <title>${options.title}</title>\n        ${l}\n        ${renderAxis(\n          offsetX,\n          offsetX,\n          0,\n          options.height - offsetY,\n          options.xAxis\n        )}\n        ${renderAxis(\n          offsetX,\n          options.width,\n          options.height - offsetY,\n          options.height - offsetY,\n          options.yAxis\n        )}\n        ${axisLabel(\n          0,\n          (options.height - offsetY) / 2,\n          options.yLabel.name,\n          {\n            style: \"transform: rotate(-90deg);\",\n            ...options.yLabel\n          },\n          { style: \"transform: translate(-15%, 55%)\" }\n        )}\n        ${yPoints.map((p, i) => {\n          const scaledPoint = yScaledLabels[i];\n          // NOTE: +0.5 is to center text vertically\n          return axisLabel(offsetX / 1.5, scaledPoint + 0.5, p, options.yLabel);\n        })}\n        ${yScaledLabels.map(p => {\n          return renderAxis(offsetX, options.width, p, p, options.yLabel);\n        })}\n        ${labels.map(({ pos, name }) => {\n          return axisLabel(\n            pos,\n            options.height - offsetY / 2,\n            name,\n            options.xLabel\n          );\n        })}\n        ${labels.map(({ pos }) => {\n          return renderAxis(\n            pos,\n            pos,\n            0,\n            options.height - offsetY,\n            options.xLabel\n          );\n        })}\n      </svg>\n    `;\n}\n\nexport function polyline(x, y, options) {\n  options = toParamCase(options);\n\n  if (x.length !== y.length) {\n    throw new Error(\n      `x and y parameters need to be of same length. They are not: x (${\n        x.length\n      }) and y (${y.length}).`\n    );\n  }\n\n  if (x.length === 0) {\n    throw new Error(\"Length of data x and y cannot be zero\");\n  }\n\n  let points = \"\";\n  for (let i = 0; i < x.length; i++) {\n    points += `${x[i]},${y[i]} `;\n  }\n\n  // NOTE: We pop the last character as it's an unneeded space.\n  points = points.slice(0, -1);\n\n  return html`\n    <polyline ...${options} points=${points}/>\n  `;\n}\n\nexport function sortRangeAsc(range) {\n  return range.sort((a, b) => a - b);\n}\n\nexport function countUnique(range, equalityOp) {\n  if (range.length < 2) {\n    return range.length;\n  }\n  let buckets = [[range[0]]];\n\n  // NOTE: We start at `1` as we've already put element `0` in the first\n  // bucket.\n  for (let i = 1; i < range.length; i++) {\n    const date = range[i];\n    let match;\n\n    for (let bucket of buckets) {\n      if (equalityOp(date, bucket[0])) {\n        match = bucket;\n      }\n    }\n    if (match) {\n      match.push(date);\n    } else {\n      buckets.push([date]);\n    }\n  }\n  return buckets.length;\n}\n\n// NOTE: Expects sorted `range` (ASC).\nexport function pointWidth(total, range, equalityOp) {\n  const count = countUnique(range, equalityOp);\n  return total / count;\n}\n\nexport function insertInto(range, candidates) {\n  let insertedAt = [];\n  let cCopy = [...candidates];\n\n  for (let i = 0; i < range.length; i++) {\n    const date = range[i];\n    for (let j = 0; j < cCopy.length; j++) {\n      const candidate = cCopy[j];\n\n      if (isEqual(date, candidate)) {\n        insertedAt.push(i);\n        cCopy.splice(j, 1);\n        i = 0;\n      } else if (isAfter(date, candidate)) {\n        insertedAt.push(i);\n        cCopy.splice(j, 1);\n        i = 0;\n      }\n    }\n  }\n\n  if (cCopy.length > 0) {\n    for (let i = range.length; i < range.length + cCopy.length; i++) {\n      insertedAt.push(i);\n    }\n  }\n\n  return insertedAt;\n}\n\nexport function scaleDates(from, to, range, equalityOp = isSameDay) {\n  range = sortRangeAsc(range);\n\n  const pWidth = pointWidth(to - from, range, equalityOp);\n  const x = range.map((d, i) => from + i * pWidth);\n\n  const months = eachMonthOfInterval({\n    start: range[0],\n    end: range[range.length - 1]\n  });\n  const insertedAt = insertInto(range, months);\n  const names = months.map(d => format(d, \"MMM yyyy\"));\n  const labels = insertedAt.map((i, j) => ({\n    pos: from + i * pWidth,\n    name: names[j]\n  }));\n\n  return { x, labels };\n}\n\nexport function getMinMax(range, margin = 0) {\n  const max = Math.max.apply(Math, range) + margin;\n  const min = Math.min.apply(Math, range) - margin;\n\n  return {\n    min,\n    max\n  };\n}\n\nexport function scalePoints(from, to, min, max, range) {\n  const minAllowed = from;\n  const maxAllowed = to;\n\n  // NOTE: For explaination see: https://stackoverflow.com/a/31687097/1263876\n  const scale = val =>\n    to -\n    from * 2 -\n    ((maxAllowed - minAllowed) * (val - min)) / (max - min) +\n    minAllowed;\n  return range.map(scale);\n}\n\nexport function toParamCase(obj) {\n  let pcObj = {};\n\n  Object.keys(obj).forEach(key => {\n    pcObj[paramCase(key)] = obj[key];\n  });\n\n  return pcObj;\n}\n\nexport function renderAxis(x1, x2, y1, y2, options) {\n  options = toParamCase(options);\n  return html`\n    <g ...${options}>\n      <line x1=${x1} x2=${x2} y1=${y1} y2=${y2}></line>\n    </g>\n  `;\n}\n\nexport function axisLabel(x, y, text, options, containerOptions) {\n  options = toParamCase(options);\n  return html`\n    <g ...${containerOptions}>\n      <text ...${options} x=${x} y=${y}>${text}</text>\n    </g>\n  `;\n}\n\nexport function generateLabelRange(min, max, distance) {\n  const labels = [];\n  const start = Math.floor(min);\n  for (let i = start; i <= max; i++) {\n    if (i % distance === 0) {\n      labels.push(i);\n    }\n  }\n\n  return labels;\n}\n"],"names":["html","htm","bind","vhtml","plot","data","options","scaleDates","width","x","labels","getMinMax","y","margin","min","max","scalePoints","height","yPoints","generateLabelRange","yDistance","yScaledLabels","l","polyline","line","title","renderAxis","xAxis","yAxis","axisLabel","yLabel","name","style","map","p","i","pos","offsetY","xLabel","toParamCase","length","Error","points","slice","sortRangeAsc","range","sort","a","b","countUnique","equalityOp","buckets","date","match","bucket","push","pointWidth","total","insertInto","candidates","insertedAt","cCopy","j","candidate","isEqual","isAfter","splice","from","to","isSameDay","pWidth","d","months","eachMonthOfInterval","start","end","names","format","Math","apply","minAllowed","maxAllowed","val","obj","pcObj","Object","keys","forEach","key","paramCase","x1","x2","y1","y2","text","containerOptions","distance","floor"],"mappings":"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"}